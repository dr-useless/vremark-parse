import { TTokenizer, TAnyToken, TTokenType, IParser, IText, TInlineToken, TBlockToken } from './types';
export declare const token: <T extends TAnyToken>(value: string, type: TTokenType, children?: any, overrides?: Partial<import("./types").INewline> | Partial<import("./types").ICode> | Partial<import("./types").IMath> | Partial<import("./types").IThematicBreak> | Partial<import("./types").IHeading> | Partial<import("./types").IBlockquote> | Partial<import("./types").IList> | Partial<import("./types").IListItem> | Partial<import("./types").IHtml> | Partial<import("./types").ITable> | Partial<import("./types").ITableRow> | Partial<import("./types").ITableCell> | Partial<import("./types").IDefinition> | Partial<import("./types").IFootnoteDefinition> | Partial<import("./types").IParagraph> | Partial<import("./types").IInlineCode> | Partial<import("./types").IStrong> | Partial<import("./types").IEmphasis> | Partial<import("./types").IDelete> | Partial<import("./types").IInlineMath> | Partial<import("./types").IFootnoteReference> | Partial<import("./types").ILinkReference> | Partial<import("./types").IImageReference> | Partial<import("./types").ILink> | Partial<import("./types").IImage> | Partial<import("./types").IInlineLink> | Partial<import("./types").ISup> | Partial<import("./types").ISub> | Partial<import("./types").IMark> | Partial<import("./types").IHandle> | Partial<import("./types").IUnderline> | Partial<import("./types").IBreak> | Partial<import("./types").IIcon> | Partial<IText> | Partial<import("./types").IWhitespace> | undefined) => T;
export declare const loop: (parser: IParser, tokenizer: TTokenizer<TAnyToken>, value: string) => TAnyToken[] | undefined;
export declare const first: (tokenizers: TTokenizer<any>[]) => TTokenizer<any>;
export interface IcreateParserOptions {
    inline: TTokenizer<TInlineToken>[];
    block: TTokenizer<TBlockToken>[];
}
declare const createParser: ({ inline, block }: IcreateParserOptions) => IParser;
export default createParser;
